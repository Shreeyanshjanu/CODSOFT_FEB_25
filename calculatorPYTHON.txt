import turtle
import time
import math

# Set up the screen
screen = turtle.Screen()
screen.title("Turtle Calculator")

# Get user inputs using Turtle's dialog boxes
a = turtle.numinput("Input", "Enter the first number:")
b = turtle.numinput("Input", "Enter the second number:")
operand = turtle.textinput("Input", "Enter the operand (+, -, *, /, %, ^):")

# Convert numbers to integers for operations like modulo
# (For division, float is acceptable.)
a = int(a)
b = int(b)

# Create a turtle for displaying text and animation
pen = turtle.Turtle()
pen.hideturtle()
pen.penup()
pen.goto(0, 50)

# Function to display a simple loading animation
def loading_animation():
    for i in range(3):
        pen.clear()
        dots = '.' * (i + 1)
        pen.write(f"Calculating{dots}", align="center", font=("Arial", 24, "normal"))
        time.sleep(0.5)
    pen.clear()
    pen.write("Calculation complete!", align="center", font=("Arial", 24, "normal"))
    time.sleep(1)
    pen.clear()

# Run the loading animation
loading_animation()

# Perform the calculation based on the operand
result = None
operation = ""

if operand == '+':
    result = a + b
    operation = "sum"
elif operand == '-':
    result = a - b
    operation = "difference"
elif operand == '*':
    result = a * b
    operation = "product"
elif operand == '/':
    if b != 0:
        result = a / b
    else:
        result = "Error: Division by zero!"
    operation = "quotient"
elif operand == '%':
    if b != 0:
        result = a % b
    else:
        result = "Error: Modulo by zero!"
    operation = "modulo"
elif operand == '^':
    result = math.pow(a, b)
    operation = "power"
else:
    result = "Invalid operand!"

# Display the result
pen.goto(0, 0)
if isinstance(result, str):
    pen.write(result, align="center", font=("Arial", 24, "normal"))
else:
    pen.write(f"The {operation} is: {result}", align="center", font=("Arial", 24, "normal"))

# Keep the window open until closed by the user
turtle.done()






1. Importing Modules
python

import turtle
import time
import math
turtle:
This module provides functions to create graphics using a “turtle” that can move around the screen. We use it here to create a GUI-like interface.

time:
This module lets us pause the program (using time.sleep) to create delays. In our case, it's used for the loading animation.

math:
This module provides mathematical functions. Here, it is used for exponentiation via math.pow.

2. Setting Up the Turtle Screen
python

screen = turtle.Screen()
screen.title("Turtle Calculator")
turtle.Screen():
This initializes a window (or screen) where the turtle graphics will be displayed.

screen.title("Turtle Calculator"):
Sets the title of the window to "Turtle Calculator" so users know what the application is.

3. Getting User Input with Turtle Dialogs
python

a = turtle.numinput("Input", "Enter the first number:")
b = turtle.numinput("Input", "Enter the second number:")
operand = turtle.textinput("Input", "Enter the operand (+, -, *, /, %, ^):")
turtle.numinput:
This function pops up a dialog box asking the user for a numerical input. We ask for two numbers (a and b).

turtle.textinput:
This function shows a dialog box for text input. We use it to ask the user for the operator (like +, -, etc.).

Note:
The numbers returned by numinput are of type float. Since we want to work with integers (especially for operations like modulo %), we convert them later.

4. Converting the Numeric Inputs
python

a = int(a)
b = int(b)
We convert the user inputs a and b to integers.
This conversion is important because operations such as modulo (%) expect integer operands.
(If you want to allow floats for division or exponentiation, you might handle conversion differently.)
5. Setting Up the Turtle for Drawing Text
python

pen = turtle.Turtle()
pen.hideturtle()
pen.penup()
pen.goto(0, 50)
turtle.Turtle():
This creates a new turtle (named pen) which we will use to write text and perform our animations.

pen.hideturtle():
Hides the turtle’s icon (so you only see the text, not the arrow or shape that represents the turtle).

pen.penup():
Lifts the pen so that moving the turtle does not draw lines. We want it to move without drawing.

pen.goto(0, 50):
Positions the turtle at coordinates (0, 50) on the screen. This is where our text will first appear.

6. Defining the Loading Animation Function
python

def loading_animation():
    for i in range(3):
        pen.clear()
        dots = '.' * (i + 1)
        pen.write(f"Calculating{dots}", align="center", font=("Arial", 24, "normal"))
        time.sleep(0.5)
    pen.clear()
    pen.write("Calculation complete!", align="center", font=("Arial", 24, "normal"))
    time.sleep(1)
    pen.clear()
Function Purpose:
This function creates a simple animation that simulates a “loading” or “processing” effect.

for i in range(3):
The loop runs 3 times. Each iteration represents a new frame of the animation.

pen.clear():
Clears any text previously written by the turtle so that we can update it.

dots = '.' * (i + 1):
Creates a string of dots that increases in length with each iteration. For example, if i is 0, it will create one dot; if i is 1, it will create two dots, etc.

pen.write(...):
Writes the text "Calculating" followed by the dots. The text is centered and uses the Arial font at size 24.

time.sleep(0.5):
Pauses for 0.5 seconds before the next update, creating the animation effect.

After the loop:
The screen is cleared, and the message “Calculation complete!” is written. After a short pause (time.sleep(1)), the screen is cleared again to prepare for the final result.

7. Running the Loading Animation
python

loading_animation()
This simply calls the loading_animation() function, so the user sees the animation before the result is displayed.
8. Performing the Calculation
python

result = None
operation = ""

if operand == '+':
    result = a + b
    operation = "sum"
elif operand == '-':
    result = a - b
    operation = "difference"
elif operand == '*':
    result = a * b
    operation = "product"
elif operand == '/':
    if b != 0:
        result = a / b
    else:
        result = "Error: Division by zero!"
    operation = "quotient"
elif operand == '%':
    if b != 0:
        result = a % b
    else:
        result = "Error: Modulo by zero!"
    operation = "modulo"
elif operand == '^':
    result = math.pow(a, b)
    operation = "power"
else:
    result = "Invalid operand!"
Initialization:
Two variables, result and operation, are initialized.

result will hold the result of the calculation (or an error message).
operation holds a string description of what was calculated.
if/elif statements:
Each branch checks the operand entered by the user:

Addition (+):
Calculates the sum of a and b.

Subtraction (-):
Calculates the difference.

Multiplication (*):
Calculates the product.

Division (/):
Checks if b is not zero (to avoid division by zero). If valid, it calculates the quotient; otherwise, it sets an error message.

Modulo (%):
Similar check for division by zero is made before computing the remainder.

Exponentiation (^):
Uses math.pow(a, b) to compute a raised to the power of b.

Else (Invalid Operand):
If the entered operand doesn't match any of the expected symbols, the result is set to an "Invalid operand!" message.

9. Displaying the Result
python

pen.goto(0, 0)
if isinstance(result, str):
    pen.write(result, align="center", font=("Arial", 24, "normal"))
else:
    pen.write(f"The {operation} is: {result}", align="center", font=("Arial", 24, "normal"))
pen.goto(0, 0):
Moves the turtle to the coordinate (0, 0) to write the result.

Result Check:
The code checks if result is a string.

If it is (which happens if there was an error or an invalid operand), it simply writes that message.
Otherwise, it writes a formatted message including the operation name and the computed result.
pen.write(...):
This writes the result on the screen, centered with the specified font.

10. Keeping the Window Open
python

turtle.done()
turtle.done():
This function tells Turtle that we're done with our drawing, and it keeps the window open until the user closes it manually. Without this, the window might close immediately after the program finishes.
Summary
Modules and Screen Setup:
The code begins by importing the necessary modules and setting up the Turtle screen with a title.

User Input:
It collects two numbers and an arithmetic operator from the user using Turtle’s dialog boxes.

Animation Setup:
A Turtle pen is created to display messages, and a loading animation function is defined and called to simulate a processing delay.

Calculation:
Depending on the operator provided, the code performs the corresponding arithmetic operation while handling errors like division or modulo by zero.

Result Display:
The calculated result or error message is displayed on the Turtle screen.

Final Step:
The program calls turtle.done() to keep the window open so the user can see the result.